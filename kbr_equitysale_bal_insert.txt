CREATE DEFINER=`seertree_HR`@`%` PROCEDURE `training`.`kbr_equitysale_bal_insert`(IN `p_inst_id` INT, IN `p_sale_trx_id` INT, IN `l_date` DATE, IN `l_name` VARCHAR(50))
BEGIN
    DECLARE
        l_rec_cnt INT;

DECLARE l_bal_rec_cnt INT;

DECLARE l_buy_sum_unit DOUBLE;

DECLARE l_buy_sum_amt DOUBLE;



        DECLARE l_bal_avg_price DOUBLE;

DECLARE l_sale_units DOUBLE;

DECLARE l_sale_trx_id INT;

DECLARE l_currency_code VARCHAR(100);

DECLARE l_profit_loss DOUBLE;

DECLARE l_closing DOUBLE;

DECLARE p_company_code INT;

DECLARE l_company_id INT;

DECLARE rd_date DATE;

DECLARE i_units_sold DOUBLE;

DECLARE i_bank_account_id INT;

DECLARE i_sale_date DATE;

DECLARE i_sale_trx_id INT;

DECLARE i_company_id INT;

DECLARE d_units_sold DOUBLE;

DECLARE d_sale_amount DOUBLE;

DECLARE d_sale_price_per_unit DOUBLE;

DECLARE message VARCHAR(100);

DECLARE l_fv_unit_price double;

DECLARE finished INT DEFAULT 0;

DECLARE c CURSOR FOR
    SELECT
	units_sold,
	bank_account_id,
	sale_date,
	sale_trx_id,
	company_id,
	nav
FROM
	KBR_EQUITY_SALE
WHERE
	inst_id = p_inst_id
	AND sale_trx_id = p_sale_trx_id;

DECLARE CONTINUE
    HANDLER FOR NOT FOUND
SET
    finished = 1;

BEGIN
    SELECT
	company_id
    INTO
	l_company_id
FROM
	KBR_EQUITY_SALE
WHERE
	inst_id = p_inst_id
	AND sale_trx_id = p_sale_trx_id;

SELECT
	MAX(km1.rate_date)
INTO
	rd_date
FROM
	KBR_MARKET_PRICES km1
WHERE
	km1.inst_id = p_inst_id;

SELECT
	IFNULL(SUM(closing),
    0)
INTO
	l_closing
FROM
	KBR_MARKET_PRICES km
WHERE
	1 = 1
	AND inst_id = p_inst_id
	AND km.rate_date = rd_date;

BEGIN
    DECLARE EXIT
HANDLER FOR SQLEXCEPTION
BEGIN
    SET
        l_rec_cnt = 0;
END;

SET
l_rec_cnt = NULL;

SELECT
	COUNT(*)
INTO
	l_rec_cnt
FROM
	KBR_EQUITY_SALE
WHERE
	inst_id = p_inst_id
	AND sale_trx_id = p_sale_trx_id
	AND company_id = l_company_id;
END;

IF l_rec_cnt > 0 THEN
SELECT
	CONCAT(
        'Record  exist in KBR_EQUITY_SALE table for the  Inst Id:',
        p_inst_id,
        ' and trx Id:',
        p_sale_trx_id
    ) AS message;

BEGIN
    DECLARE EXIT
HANDLER FOR SQLEXCEPTION
BEGIN
    SET
        l_bal_avg_price = 0;
END;

SET
    l_bal_avg_price = NULL;

SELECT
	IFNULL(SUM(average_price), 0)
INTO
	l_bal_avg_price
FROM
	KBR_EQUITY_BAL
WHERE
	inst_id = p_inst_id
	AND company_id = l_company_id;

END;

BEGIN
    DECLARE EXIT
HANDLER FOR SQLEXCEPTION
BEGIN
    SET
        message = 'currency_code from inst_master table';
END;

SELECT
	currency_code
INTO
	l_currency_code
FROM
	KBR_INST_MASTER
WHERE
	inst_id = p_inst_id;

END;

OPEN c;

LOOP1 : LOOP

FETCH c
INTO
	i_units_sold,
	i_bank_account_id,
	i_sale_date,
	i_sale_trx_id,
	i_company_id,
	d_sale_price_per_unit;

IF finished = 1 THEN LEAVE LOOP1;
END IF;

BEGIN
    DECLARE EXIT
HANDLER FOR SQLEXCEPTION
BEGIN
    SELECT
	'Error at insert2' AS message;
END;

INSERT
	INTO
	KBR_EQUITY_BUY(
    inst_id,
	inst_type,
	folio_number,
	trx_id,
	purchase_date,
	inst_code,
	units,
	purchase_price,
	currency,
	amount,
	bank_account_id,
	last_update_date,
	last_updated_by,
	creation_date,
	created_by,
	last_update_login,
	STATUS,
	sale_trx_id,
	company_id
)
VALUES(
    p_inst_id,
    NULL,
    CONCAT_WS('-', 'SELL', i_sale_trx_id),
    i_sale_trx_id,
    i_sale_date,
    NULL,
    CONCAT('-', i_units_sold),
    d_sale_price_per_unit,
    l_currency_code,
     ( -1 * i_units_sold * l_bal_avg_price ),
    i_bank_account_id,
    l_date,
    l_name,
    l_date,
    l_name,
    l_name,
    'Sale Active',
    p_sale_trx_id,
    i_company_id
);

END;

SELECT
	sale_amount,
	units_sold
INTO
	d_sale_amount,
	d_units_sold
FROM
	KBR_EQUITY_SALE
WHERE
	inst_id = p_inst_id
	AND sale_trx_id = p_sale_trx_id
	AND company_id = l_company_id ;

BEGIN
  
    SELECT
	(
            (d_sale_amount) -(d_units_sold) * coalesce(LATEST_NAV, average_price)
        )
    INTO
	l_profit_loss
FROM
	KBR_EQUITY_BAL
WHERE
	inst_id = p_inst_id
	AND company_id = l_company_id;

UPDATE
	KBR_EQUITY_SALE
SET
	profit_loss = l_profit_loss
WHERE
	inst_id = p_inst_id
	AND sale_trx_id = p_sale_trx_id
	AND company_id = l_company_id;
END;

ITERATE LOOP1;
END LOOP;

CLOSE c;

BEGIN
    DECLARE EXIT
HANDLER FOR SQLEXCEPTION
BEGIN
    SELECT
	'Error at Bal1:' AS message;
END;

BEGIN
    DECLARE EXIT
HANDLER FOR SQLEXCEPTION
BEGIN
    SELECT
	'Error at getting Sum Buy values:' AS message;
END;

SET
    l_buy_sum_unit = NULL;

SET
    l_buy_sum_amt = NULL;

SELECT
	IFNULL(SUM(units),
    0),
	IFNULL(SUM(amount),
    0)
	INTO
	l_buy_sum_unit,
	l_buy_sum_amt
FROM
	KBR_EQUITY_BUY
WHERE
	inst_id = p_inst_id
	AND coalesce(UPPER(Approval_status), 'Approved') != 'REJECTED'
	AND company_id = l_company_id
	AND(UPPER(STATUS) != 'SPLIT')
	AND( UPPER(STATUS) != 'Split Cancelled' );
END;

BEGIN
    DECLARE EXIT
HANDLER FOR SQLEXCEPTION
BEGIN
    SET
        message = 'Error at Bal:';
END;

BEGIN
    DECLARE EXIT
HANDLER FOR SQLEXCEPTION
BEGIN
    SET
        l_bal_rec_cnt = 0;
END;

SET
    l_bal_rec_cnt = NULL;

SELECT
	COUNT(*)
INTO
	l_bal_rec_cnt
FROM
	KBR_EQUITY_BAL
WHERE
	1 = 1
	AND inst_id = p_inst_id
	AND company_id = l_company_id;

SELECT
	company_id
INTO
	p_company_code
FROM
	KBR_EQUITY_SALE
WHERE
	inst_id = p_inst_id
	AND sale_trx_id = p_sale_trx_id
	AND company_id = l_company_id;
END;

IF l_bal_rec_cnt > 0 THEN IF l_buy_sum_unit > 0 THEN
UPDATE
	KBR_EQUITY_BAL
SET
	units = l_buy_sum_unit,
	average_price = l_buy_sum_amt / l_buy_sum_unit,
	balance_avg =(
        (l_buy_sum_unit) *(l_buy_sum_amt / l_buy_sum_unit)
    )
WHERE
	inst_id = p_inst_id
	AND company_id = l_company_id;

ELSE
UPDATE
	KBR_EQUITY_BAL
SET
	units = l_buy_sum_unit,
	average_price = 0,
	balance_avg = 0
WHERE
	1 = 1
	AND inst_id = p_inst_id
	AND company_id = l_company_id;
END IF;
ELSE
SELECT
	CONCAT(
        'There are no Records in kbr_equity_bal with the Inst Id:',
        p_inst_id
    ) AS message;
END IF;
END;
END;
ELSE
SELECT
	CONCAT(
        'More records in KBR_EQUITY_SALE table for the Inst Id:',
        p_inst_id
    ) AS message;
END IF;

END;
END